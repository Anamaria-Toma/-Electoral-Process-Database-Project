-- Generated by Oracle SQL Developer Data Modeler 24.3.0.240.1210
--   at:        2024-12-11 22:04:48 MSK
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

-- Updated SQL Script with Correct Triggers

BEGIN
    FOR tbl IN (SELECT table_name FROM user_tables) LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || tbl.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;
END;
/
BEGIN
    FOR tbl IN (SELECT owner, table_name FROM all_tables WHERE owner = 'ALTA_SCHEMA') LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || tbl.owner || '.' || tbl.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;
END;
/
BEGIN
    FOR trg IN (SELECT trigger_name FROM user_triggers) LOOP
        EXECUTE IMMEDIATE 'DROP TRIGGER ' || trg.trigger_name;
    END LOOP;
END;
/
BEGIN
    FOR seq IN (SELECT sequence_name FROM user_sequences) LOOP
        EXECUTE IMMEDIATE 'DROP SEQUENCE ' || seq.sequence_name;
    END LOOP;
END;
/
BEGIN
    FOR idx IN (SELECT index_name FROM user_indexes) LOOP
        EXECUTE IMMEDIATE 'DROP INDEX ' || idx.index_name;
    END LOOP;
END;
/
--ALEGERE
CREATE TABLE alegere (
    id NUMBER(3) NOT NULL,
    tip_alegere VARCHAR2(22) NOT NULL,
    data_alegerilor DATE NOT NULL, 
    candidat_info_id NUMBER(3)
);

ALTER TABLE alegere
    ADD CONSTRAINT alegeri_tip_ck
        CHECK ( tip_alegere IN ('Locale', 'Parlamentare', 'Parlamentul European', 'Prezidențiale', 'Referendum'));

ALTER TABLE alegere ADD CONSTRAINT alegere_pk PRIMARY KEY (id);

CREATE SEQUENCE alegere_id_seq START WITH 1 NOCACHE ORDER;
CREATE OR REPLACE TRIGGER alegere_id_trg 
BEFORE INSERT ON alegere 
FOR EACH ROW 
WHEN (NEW.id IS NULL) 
BEGIN
    :NEW.id := alegere_id_seq.NEXTVAL;
END;
/


--CANDIDAT
CREATE TABLE candidat (
    id NUMBER(3) NOT NULL,
    nume_candidat VARCHAR2(55) NOT NULL,
    pozitie_buletin NUMBER(2) NOT NULL,
    partid_id NUMBER(2) NOT NULL, 
    candidat_info_id NUMBER(3)
);

ALTER TABLE candidat ADD CONSTRAINT candidat_pk PRIMARY KEY (id);
ALTER TABLE candidat ADD CONSTRAINT candidat_pozitie_un UNIQUE (pozitie_buletin);

CREATE SEQUENCE candidat_id_seq START WITH 1 NOCACHE ORDER;
CREATE OR REPLACE TRIGGER candidat_id_trg 
BEFORE INSERT ON candidat 
FOR EACH ROW 
WHEN (NEW.id IS NULL) 
BEGIN
    :NEW.id := candidat_id_seq.NEXTVAL;
END;
/

--INFORMATII CANDIDAT
CREATE TABLE candidat_alegere_info (
    id NUMBER(5),
    candidat_id NUMBER(3) NOT NULL,
    alegere_id NUMBER(3) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (candidat_id, alegere_id)
);

CREATE SEQUENCE candidat_alegere_info_id_seq START WITH 1
INCREMENT BY 1
NOCACHE;

CREATE OR REPLACE TRIGGER candidat_alegere_info_id_trg
BEFORE INSERT ON candidat_alegere_info
FOR EACH ROW
BEGIN
    -- Verificăm dacă ID-ul nu a fost setat și îl generăm automat din secvență
    IF :NEW.id IS NULL THEN
        :NEW.id := candidat_alegere_info_id_seq.NEXTVAL;
    END IF;
END;
/
--CETATEAN
CREATE TABLE cetatean (
    id NUMBER(10) NOT NULL,
    sectie_id NUMBER(5) NOT NULL,
    cod_vot VARCHAR2(10)
);

ALTER TABLE cetatean ADD CONSTRAINT cetatean_pk PRIMARY KEY (id);

CREATE SEQUENCE cetatean_id_seq START WITH 1 NOCACHE ORDER;
CREATE OR REPLACE TRIGGER cetatean_id_trg 
BEFORE INSERT ON cetatean 
FOR EACH ROW 
WHEN (NEW.id IS NULL) 
BEGIN
    :NEW.id := cetatean_id_seq.NEXTVAL;
END;
/


--CETATEAN DETALII
CREATE TABLE cetatean_detalii (
    nume VARCHAR2(55) NOT NULL,
    cnp NUMBER(13) NOT NULL,
    serie VARCHAR2(2) NOT NULL,
    numar NUMBER(6) NOT NULL,
    varsta NUMBER(3) NOT NULL,
    adresa VARCHAR2(100) NOT NULL,
    id1 NUMBER(5) NOT NULL,
    id2 NUMBER(2) NOT NULL,
    cetatean_id NUMBER(10) NOT NULL
);

ALTER TABLE cetatean_detalii
    ADD CONSTRAINT cetatean_nume_ck CHECK (LENGTH(nume) > 1);
ALTER TABLE cetatean_detalii ADD CONSTRAINT cetatean_varsta_ck CHECK (varsta > 17);
ALTER TABLE cetatean_detalii
    ADD CONSTRAINT cetatean_adresa_ck CHECK (LENGTH(adresa) > 1);
CREATE UNIQUE INDEX cetatean_detalii_idx ON cetatean_detalii (cetatean_id ASC);
ALTER TABLE cetatean_detalii ADD CONSTRAINT cetatean_detalii_pk PRIMARY KEY (serie, numar);

--CIRCUMSCRIPTIE
CREATE TABLE circumscriptie (
    id NUMBER(2) NOT NULL,
    nume VARCHAR2(21) NOT NULL,
    regiune VARCHAR2(12) NOT NULL
);


ALTER TABLE circumscriptie
    ADD CONSTRAINT circumscriptie_nume_ck
        CHECK (nume IN ('Alba', 'Arad', 'Argeș', 'Bacău', 'Bihor', 'Bistrița-Nasaud', 'Botoșani', 'Brașov', 'Brăila', 'București', 'Buzău', 'Caraș-Severin', 'Cluj', 'Constanța', 'Covasna', 'Călărași', 'Diaspora', 'Dolj', 'Dâmbovița', 'Galați', 'Giurgiu', 'Gorj', 'Harghita', 'Hunedoara', 'Ialomița', 'Iași', 'Ilfov', 'Maramureș', 'Mehedinți', 'Mureș', 'Neamț', 'Olt', 'Prahova', 'Satu-Mare', 'Sibiu', 'Suceava', 'Sălaj', 'Teleorman', 'Timiș', 'Tulcea', 'Vaslui', 'Vrancea', 'Vâlcea'));
ALTER TABLE circumscriptie
    ADD CONSTRAINT circumscriptie_regiune_ck CHECK (regiune IN ('Banat', 'Bucovina', 'Crișana', 'Dobrogea', 'Maramureș', 'Moldova', 'Muntenia', 'Oltenia', 'Transilvania'));
ALTER TABLE circumscriptie ADD CONSTRAINT circumscriptie_pk PRIMARY KEY (id);

CREATE SEQUENCE circumscriptie_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER circumscriptie_id_trg
BEFORE INSERT ON circumscriptie
FOR EACH ROW
WHEN (NEW.id IS NULL)
BEGIN
    :NEW.id := circumscriptie_id_seq.NEXTVAL;
END;
/

--PARTID
CREATE TABLE partid (
    id NUMBER(2) NOT NULL,
    nume_partid VARCHAR2(40) NOT NULL,
    lider_partid VARCHAR2(55) NOT NULL
);

ALTER TABLE partid ADD CONSTRAINT partid_pk PRIMARY KEY (id);
ALTER TABLE partid ADD CONSTRAINT partid_nume_un UNIQUE (nume_partid);

CREATE SEQUENCE partid_id_seq START WITH 1 NOCACHE ORDER;
CREATE OR REPLACE TRIGGER partid_id_trg 
BEFORE INSERT ON partid 
FOR EACH ROW 
WHEN (NEW.id IS NULL) 
BEGIN
    :NEW.id := partid_id_seq.NEXTVAL;
END;
/

--SECTIE DE VOTARE
CREATE TABLE sectie_votare (
    id NUMBER(5) NOT NULL,
    numar_sectie NUMBER(2) NOT NULL,
    numar_maxim_alegatori NUMBER(4) NOT NULL,
    circumscriptie_id NUMBER(2) NOT NULL
);

ALTER TABLE sectie_votare ADD CONSTRAINT sectie_pk PRIMARY KEY (id);
CREATE SEQUENCE sectie_votare_id_seq START WITH 1
INCREMENT BY 1
NOCACHE;

CREATE OR REPLACE TRIGGER sectie_votare_id_trg
BEFORE INSERT ON sectie_votare
FOR EACH ROW
BEGIN
    -- Verificăm dacă ID-ul nu a fost setat și îl generăm automat din secvență
    IF :NEW.id IS NULL THEN
        :NEW.id := sectie_votare_id_seq.NEXTVAL;
    END IF;
END;
/

--VOT
CREATE TABLE vot (
    id NUMBER(8) NOT NULL,
    timp TIMESTAMP WITH LOCAL TIME ZONE NOT NULL,
    cetatean_id NUMBER(10) NOT NULL, 
    candidat_info_id NUMBER NOT NULL
);

ALTER TABLE vot ADD CONSTRAINT vot_pk PRIMARY KEY (id, candidat_info_id);
CREATE SEQUENCE vot_id_seq START WITH 1
INCREMENT BY 1
NOCACHE;

CREATE OR REPLACE TRIGGER vot_id_trg
BEFORE INSERT ON vot
FOR EACH ROW
BEGIN
    -- Verificăm dacă ID-ul nu a fost setat și îl generăm automat din secvență
    IF :NEW.id IS NULL THEN
        :NEW.id := vot_id_seq.NEXTVAL;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER verificare_data_vot
BEFORE INSERT ON vot
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    -- Compară doar data alegerii (fără ora) cu data votului (fără ora)
    SELECT COUNT(*)
    INTO v_count
    FROM alegere a
    WHERE TRUNC(a.data_alegerilor) = TRUNC(:NEW.timp)
    AND EXISTS (
        SELECT 1
        FROM candidat_alegere_info cai
        WHERE cai.candidat_id = :NEW.candidat_info_id
        AND cai.alegere_id = a.id
    );

    -- Dacă nu găsește o alegere corespunzătoare, ridică eroare
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Data votului trebuie să fie aceeași cu data alegerii!');
    END IF;
END;
/


-- Foreign Keys

ALTER TABLE candidat
    ADD CONSTRAINT candidat_partid_fk FOREIGN KEY (partid_id)
        REFERENCES partid (id);

ALTER TABLE candidat_alegere_info
    ADD CONSTRAINT candidat_aleger_info_candidat_fk FOREIGN KEY (candidat_id)
        REFERENCES candidat (id);

ALTER TABLE candidat_alegere_info
    ADD CONSTRAINT candidat_aleger_info_alegere_fk FOREIGN KEY (alegere_id)
        REFERENCES alegere (id);
        
ALTER TABLE cetatean_detalii
    ADD CONSTRAINT detalii_cetatean_fk FOREIGN KEY (cetatean_id)
        REFERENCES cetatean (id);

ALTER TABLE cetatean
    ADD CONSTRAINT cetatean_sectie_fk FOREIGN KEY (sectie_id)
        REFERENCES sectie_votare (id);

ALTER TABLE sectie_votare
    ADD CONSTRAINT sectie_circumscriptie_fk FOREIGN KEY (circumscriptie_id)
        REFERENCES circumscriptie (id);

ALTER TABLE vot
    ADD CONSTRAINT vot_candidat_fk FOREIGN KEY (candidat_info_id)
        REFERENCES candidat_alegere_info (id);
ALTER TABLE vot
    ADD CONSTRAINT vot_cetatean_fk FOREIGN KEY (cetatean_id)
        REFERENCES cetatean (id);

/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             9
-- CREATE INDEX                             1
-- ALTER TABLE                             26
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           8
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          8
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
